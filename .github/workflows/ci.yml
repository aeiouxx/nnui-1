
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    container: aeiouxx/wx-ci:latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache build
      uses: actions/cache@v2
      with:
        path: |
          build
        key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Build
      run: |
        mkdir -p build
        cd build
        cmake ..
        make -j

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    # - name: Cache cmake
    #   uses: actions/cache@v2
    #   with:
    #     path: |
    #       C:\ProgramData\chocolatey\lib\cmake
    #       C:\ProgramData\chocolatey\bin\cmake.exe
    #     key: ${{ runner.os }}-choco-cmake
    
    - name: Check if CMake is installed
      id: check-cmake
      shell: pwsh
      run: |
        $ErrorActionPreference = "Continue"
        cmake --version
        if ($?) {
          echo "CMake is installed."
          echo "CMAKE_INSTALLED=true" | Out-File -Append -FilePath $env:GITHUB_ENV
        } else {
          echo "CMake is not installed."
          echo "CMAKE_INSTALLED=false" | Out-File -Append -FilePath $env:GITHUB_ENV
        }

    - name: Install cmake
      if : env.CMAKE_INSTALLED == 'false'
      run: |
        choco install cmake

    - name: Cache build
      uses: actions/cache@v2
      with:
        path: |
          build
        key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Create build directory
      run: |
        if (-Not (Test-Path "build")) { New-Item -Path "build" -ItemType Directory }       

    - name: Compile application
      run: |
        cd build
        cmake ..
        cmake --build . --target ALL_BUILD --config Release -- /nologo /verbosity:minimal /maxcpucount
