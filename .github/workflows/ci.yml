
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    container: aeiouxx/sfml-ci:latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache build
      uses: actions/cache@v2
      with:
        path: |
          build
        key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Build
      run: |
        mkdir -p build
        cd build
        cmake ..
        make -j

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Cache cmake
      uses: actions/cache@v2
      with:
        path: |
          C:\ProgramData\chocolatey\lib\cmake
          C:\ProgramData\chocolatey\bin\cmake.exe
        key: ${{ runner.os }}-choco-cmake
    
    - name: Check cmake installed
      id: check-cmake
      shell: pwsh
      run: |
        $cmakeInstalled = $null
        try {
          $cmakeInstalled = cmake --version
          echo "CMake version: $cmakeInstalled"
          echo "installed=true" >> $GITHUB_OUTPUT
        } catch {
          echo "CMake not installed"
          echo "installed=false" >> $GITHUB_OUTPUT
        }

    - name: Install cmake
      if: steps.check-cmake.outputs.installed != 'true'
      run: |
        choco install cmake

    - name: Cache build
      uses: actions/cache@v2
      with:
        path: |
          build
        key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Create build directory
      run: |
        if (-Not (Test-Path "build")) { New-Item -Path "build" -ItemType Directory }       

    - name: Compile application
      run: |
        cd build
        cmake ..
        cmake --build . --target ALL_BUILD --config Release -- /nologo /verbosity:minimal /maxcpucount
